//    You are given an array of integers representing coordinates of obstacles situated on a straight line.
//
//    Assume that you are jumping from the point with coordinate 0 to the right. You are allowed only to make jumps of the same length represented by some integer.
//
//    Find the minimal length of the jump enough to avoid all the obstacles.
//
//    Example
//
//    For inputArray = [5, 3, 6, 7, 9], the output should be
//    avoidObstacles(inputArray) = 4.
//
//    Check out the image below for better understanding:
//
//
//
//    Input/Output
//
//    [execution time limit] 3 seconds (kt)
//
//    [input] array.integer inputArray
//
//    Non-empty array of positive integers.
//
//    Guaranteed constraints:
//    2 ≤ inputArray.length ≤ 1000,
//    1 ≤ inputArray[i] ≤ 1000.
//
//    [output] integer
//
//            The desired length.
//-------------------------------Code-------------------------------------//
fun avoidObstacles(inputArray: MutableList<Int>): Int {     
    var max = 0
for(i in 0..inputArray.size-1)
   {
        if(inputArray[i] > max) {
            max = inputArray[i];
        }
    }
    var min = 1
    var indivisible = false
    while(min <= max+1 && !indivisible) {
        indivisible = true
        if(indivisible)
            for(j in 0..inputArray.size-1)
        {
            if(inputArray[j] % min == 0) {
                indivisible = false
            }
        }
        min++
    }
    min--
    return min;
}
