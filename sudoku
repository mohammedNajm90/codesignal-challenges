//Sudoku is a number-placement puzzle. The objective is to fill a 9 × 9 grid with digits so that each column, each row, and each of the nine 3 × 3 sub-grids that compose the grid contains all of the digits from 1 to 9.
//
//This algorithm should check if the given grid of numbers represents a correct solution to Sudoku.
//
//Example
//
//For
//grid = [[1, 3, 2, 5, 4, 6, 9, 8, 7],
//[4, 6, 5, 8, 7, 9, 3, 2, 1],
//[7, 9, 8, 2, 1, 3, 6, 5, 4],
//[9, 2, 1, 4, 3, 5, 8, 7, 6],
//[3, 5, 4, 7, 6, 8, 2, 1, 9],
//[6, 8, 7, 1, 9, 2, 5, 4, 3],
//[5, 7, 6, 9, 8, 1, 4, 3, 2],
//[2, 4, 3, 6, 5, 7, 1, 9, 8],
//[8, 1, 9, 3, 2, 4, 7, 6, 5]]
//the output should be
//sudoku(grid) = true;
//
//For
//grid = [[1, 3, 2, 5, 4, 6, 9, 2, 7],
//[4, 6, 5, 8, 7, 9, 3, 8, 1],
//[7, 9, 8, 2, 1, 3, 6, 5, 4],
//[9, 2, 1, 4, 3, 5, 8, 7, 6],
//[3, 5, 4, 7, 6, 8, 2, 1, 9],
//[6, 8, 7, 1, 9, 2, 5, 4, 3],
//[5, 7, 6, 9, 8, 1, 4, 3, 2],
//[2, 4, 3, 6, 5, 7, 1, 9, 8],
//[8, 1, 9, 3, 2, 4, 7, 6, 5]]
//the output should be
//sudoku(grid) = false.
//
//The output should be false: each of the nine 3 × 3 sub-grids should contain all of the digits from 1 to 9.
//These examples are represented on the image below.
//
//
//
//Input/Output
//
//[execution time limit] 3 seconds (kt)
//
//[input] array.array.integer grid
//
//A matrix representing 9 × 9 grid already filled with numbers from 1 to 9.
//
//Guaranteed constraints:
//grid.length = 9,
//grid[i].length = 9,
//1 ≤ grid[i][j] ≤ 9.
//
//[output] boolean
//
//true if the given grid represents a correct solution to Sudoku, false otherwise.
//-------------------------------Code-------------------------------------//
fun sudoku(grid: MutableList<MutableList<Int>>): Boolean {
  for (i in grid.indices) {
        for (j in 0 until grid[0].size) {
            if (grid[i][j] != 0) {
                val tmp = grid[i][j]
                for (k in j + 1 until grid[0].size) {
                    if (tmp == grid[i][k]) {
                        return false
                    }
                }
                for (l in i + 1 until grid.size) {
                    if (tmp == grid[l][j]) {
                        return false
                    }
                }
                var x = 0
                var y = 0
                if (i < 3) {
                    x = 0
                }
                if (j < 3) {
                    y = 0
                }
                if (i > 3 && i < 6) {
                    x = 3
                }
                if (j > 3 && j < 6) {
                    y = 3
                }
                if (i > 6) {
                    x = 6
                }
                if (j > 6) {
                    y = 6
                }
                var tmp2 = 0
                for (p in x until x + 3) {
                    for (g in y until y + 3) {
                        if (grid[p][g] == tmp) {
                            tmp2++
                        }
                    }
                }
                if (tmp2 >= 2) {
                    return false
                }
            }
        }
    }
    return true
}
