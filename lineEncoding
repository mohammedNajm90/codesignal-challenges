//Given a string, return its encoding defined as follows:
//
//First, the string is divided into the least possible number of disjoint substrings consisting of identical characters
//for example, "aabbbc" is divided into ["aa", "bbb", "c"]
//Next, each substring with length greater than one is replaced with a concatenation of its length and the repeating character
//for example, substring "bbb" is replaced by "3b"
//Finally, all the new strings are concatenated together in the same order and a new string is returned.
//Example
//
//For s = "aabbbc", the output should be
//lineEncoding(s) = "2a3bc".
//
//Input/Output
//
//[execution time limit] 3 seconds (kt)
//
//[input] string s
//
//String consisting of lowercase English letters.
//
//Guaranteed constraints:
//4 ≤ s.length ≤ 15.
//
//[output] string
//
//Encoded version of s.
//-------------------------------Code-------------------------------------//
fun lineEncoding(s: String): String {
  var result = ""
    var current = s[0]
    var count = 1
    for (i in 1 until s.length) {
        if (s[i] == current) count++ else {
            result += if (count == 1) current.toString() else count.toString() + current.toString()
            count = 1
            current = s[i]
        }
    }
    return if (s.substring(
            s.length - 2,
            s.length
        ) !== count.toString() + current
    ) if (count == 1) result + current.toString() else result + count.toString() + current.toString() else result
}
