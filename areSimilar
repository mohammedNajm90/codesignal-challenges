
//    Two arrays are called similar if one can be obtained from another by swapping at most one pair of elements in one of the arrays.
//
//    Given two arrays a and b, check whether they are similar.
//
//    Example
//
//    For a = [1, 2, 3] and b = [1, 2, 3], the output should be
//    areSimilar(a, b) = true.
//
//    The arrays are equal, no need to swap any elements.
//
//    For a = [1, 2, 3] and b = [2, 1, 3], the output should be
//    areSimilar(a, b) = true.
//
//    We can obtain b from a by swapping 2 and 1 in b.
//
//    For a = [1, 2, 2] and b = [2, 1, 1], the output should be
//    areSimilar(a, b) = false.
//
//    Any swap of any two elements either in a or in b won't make a and b equal.
//
//    Input/Output
//
//    [execution time limit] 3 seconds (kt)
//
//    [input] array.integer a
//
//    Array of integers.
//
//    Guaranteed constraints:
//    3 ≤ a.length ≤ 105,
//    1 ≤ a[i] ≤ 1000.
//
//    [input] array.integer b
//
//    Array of integers of the same length as a.
//
//    Guaranteed constraints:
//    b.length = a.length,
//    1 ≤ b[i] ≤ 1000.
//
//    [output] boolean
//
//            true if a and b are similar, false otherwise.
//-------------------------------Code-------------------------------------//
fun areSimilar(A: MutableList<Int>, B: MutableList<Int>): Boolean {
  val ids = ArrayList<Int>()
    for (i in 0 until A.size) {
        if (A.get(i) !== B.get(i)) {
            ids.add(i)
        }
    }
    if (ids.size == 0) {
        return true
    }
    if (ids.size != 2) {
        return false
    }
    val id1 = ids[0]
    val id2 = ids[1]
    return if (A.get(id1) == B.get(id2) && A.get(id2) == B.get(id1)) {
        true
    } else false
    
}
