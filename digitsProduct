//Given an integer product, find the smallest positive (i.e. greater than 0) integer the product of whose digits is equal to product. If there is no such integer, return -1 instead.
//
//Example
//
//For product = 12, the output should be
//digitsProduct(product) = 26;
//For product = 19, the output should be
//digitsProduct(product) = -1.
//Input/Output
//
//[execution time limit] 3 seconds (kt)
//
//[input] integer product
//
//Guaranteed constraints:
//0 ≤ product ≤ 600.
//
//[output] integer
//-------------------------------Code-------------------------------------//
fun digitsProduct(product: Int): Int {
  var product = product
    if (product < 9 && product > 0) return product
    if (product == 0) return 10
    var s = ""
    var i = 9
    while (i > 1) {
        if (product % i == 0) {
            s += i.toString()
            product /= i
            if (product % i == 0) {
                i++
            }
        }
        i--
    }
    return if (product < 2) (StringBuilder(s).reverse().toString()).toInt() else -1
}
